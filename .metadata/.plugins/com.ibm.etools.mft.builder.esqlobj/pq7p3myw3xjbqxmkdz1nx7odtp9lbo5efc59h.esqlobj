CREATE COMPUTE MODULE UPIService_CNSTRCT_ENV_HEADERS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();

		SET  Environment.targetNameSpace = namespace;
        SET Environment.Variables.UserConfigurableServiceName = '{UPIServicePolicies}:UPIService';
        
      	--Save header in Environment
        CALL setEnvForLogging(Environment,InputRoot,InputLocalEnvironment);
           
        SET Environment.Variables.MessageFlow.LOG_LEVEL = CAST(getPolicyProperty(Environment.Variables.UserConfigurableServiceName, Environment.Variables.Operation.Name||'_LOG_LEVEL') AS INT);
	    
	    --AUDIT_LOGGING 
		CALL AuditMessage(InputRoot.*[<],'ESBRequestReceived',Environment,2);
        --Validate Manadatory Header Fields
        DECLARE channelIdList CHAR getPolicyProperty(Environment.Variables.UserConfigurableServiceName,'channelIdList');
		CALL validateRequestHeader(InputRoot.*[<],'UPIService',channelIdList);

        IF( ServiceVersion <> Environment.Variables.ServiceVersionNo )THEN
			THROW USER EXCEPTION MESSAGE
			2951 VALUES('Incorrect data ','correct version no is not present in header ');
	    END IF;

        IF(Environment.Variables.JSONMessage)THEN
		  	CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' NAME 'XMLNSC';
		  	--To Convert JSON2XML
		  	CALL JSONTOXMLPROC (InputRoot.JSON.Data, OutputRoot.XMLNSC,Environment.targetNameSpace,Environment);
			SET OutputLocalEnvironment = InputLocalEnvironment;	
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData.labelName = Environment.Variables.Operation.Name;

	  	ELSE 
			CALL CopyEntireMessage();
			SET OutputLocalEnvironment = InputLocalEnvironment;	
			END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;